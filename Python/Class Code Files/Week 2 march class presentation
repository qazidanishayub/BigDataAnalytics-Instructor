{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ahmad nasir   python sets......"],"metadata":{"id":"HfsdeUCN2bUz"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"hHIItCbe2Uiy"},"outputs":[],"source":["myset = {\"ahmad\", \"ali\", \"usman\",\"ahmad\", True, \"1\", 2 }"]},{"cell_type":"code","source":["print(myset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-j3lHa5U28FL","executionInfo":{"status":"ok","timestamp":1709562652399,"user_tz":-300,"elapsed":5,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a0bb475d-e9d6-4fbb-9d88-867b2adee05c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{True, 2, 'ahmad', 'ali', '1', 'usman'}\n"]}]},{"cell_type":"markdown","source":["usman python functions..."],"metadata":{"id":"vKjrW-Ca4Hud"}},{"cell_type":"code","source":["def my_family (fname):\n","  print('thanks for coming', fname)\n","  print (fname+\"john\")\n"],"metadata":{"id":"UbbAAc-63Q6j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def even_odd_cal(num):\n","  if num % 2 == 0:\n","\n","    print(\"number is even\")\n","    print('haan waqaee even ha yrr')\n","  else:\n","        print(\"number is odd\")\n","        print('lee  waqaee odd ha yrr')"],"metadata":{"id":"GqRR7lUVCKTz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["my_family(\"Ali\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AsKztfcB5J5r","executionInfo":{"status":"ok","timestamp":1709647854777,"user_tz":-300,"elapsed":4,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4db1775e-3c29-41f7-9fd4-51c87d9da58c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["thanks for coming Ali\n","Alijohn\n"]}]},{"cell_type":"code","source":["\n","print(\"program to find even and odd\")\n","num = int(input(\"enter any number\"))\n","result = even_odd_cal(num)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HrQSKuMK8-cc","executionInfo":{"status":"ok","timestamp":1709649232121,"user_tz":-300,"elapsed":11653,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"37becf81-18c1-4e86-ab86-e33df7820220"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["program to find even and odd\n","enter any number77\n","number is odd\n","lee  waqaee odd ha yrr\n"]}]},{"cell_type":"code","source":["a == \"5\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T1UEkyqoAB28","executionInfo":{"status":"ok","timestamp":1709648746468,"user_tz":-300,"elapsed":412,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"94d84d52-04b6-40d4-e7c2-9051d46a334b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":77}]},{"cell_type":"markdown","source":["rizwan shah\n","tuple"],"metadata":{"id":"Rjd9ZmO76yY3"}},{"cell_type":"code","source":["name=(\"john\",\"sratk\",\"ahmed\",\"john\")"],"metadata":{"id":"URH-E91w5J_b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(type(name))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ej1pJA9u5KBL","executionInfo":{"status":"ok","timestamp":1709563602252,"user_tz":-300,"elapsed":548,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"bd8e5dbb-6c23-4c4b-d82f-e8d5a2733d8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'tuple'>\n"]}]},{"cell_type":"code","source":["print(name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C4AXLxNM5KC5","executionInfo":{"status":"ok","timestamp":1709563646440,"user_tz":-300,"elapsed":716,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"047bfd7e-1eda-4534-c1c6-a5e8a5fccaea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('john', 'sratk', 'ahmed', 'john')\n"]}]},{"cell_type":"code","source":["name[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"66KOIJS55KFK","executionInfo":{"status":"ok","timestamp":1709563739698,"user_tz":-300,"elapsed":589,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"aa3996ce-d3c6-4a6f-ec2f-24991e197fa3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'sratk'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["Rana faisal Mahmood"],"metadata":{"id":"JNT8oStH8WPh"}},{"cell_type":"code","source":["array=[1,2,3,4,5,6]\n","print(array)\n","array.append (10)\n","print(array)\n","array.remove (5)\n","print(array)\n","len (array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CRXnpIL779yu","executionInfo":{"status":"ok","timestamp":1709564082988,"user_tz":-300,"elapsed":19,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"888cc9b0-4a7d-41d7-8c9f-1adedc8a6d12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6]\n","[1, 2, 3, 4, 5, 6, 10]\n","[1, 2, 3, 4, 6, 10]\n"]},{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["array.insert(0,100)\n"],"metadata":{"id":"gBDvhis1-Dnu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["array"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZCX5TCz0-Dql","executionInfo":{"status":"ok","timestamp":1709564358271,"user_tz":-300,"elapsed":6,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"b2545b20-6f2b-4e34-cc50-87d5bc4f6b01"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[100, 1, 2, 3, 4, 6, 10]"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["array.insert(4, 67)"],"metadata":{"id":"yMK2-l7O-Dso"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["array"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0FbwLIJV-Duy","executionInfo":{"status":"ok","timestamp":1709564420893,"user_tz":-300,"elapsed":14,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4d280a0e-7b00-457f-c834-55d8a17a8ddd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[100, 1, 2, 3, 67, 4, 6, 10]"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["yusra naseer **while loop python** ...."],"metadata":{"id":"jdaaPbC0_RWl"}},{"cell_type":"code","source":["i= 3\n","while i<8:\n","   print('before adding:', i)\n","   i= i + 1\n","   print('             after adding: ', i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ob-uz-UB-Dwy","executionInfo":{"status":"ok","timestamp":1709565428367,"user_tz":-300,"elapsed":504,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"687ae8c8-a2f9-4694-c06c-69d14c26329e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before adding: 3\n","             after adding:  4\n","before adding: 4\n","             after adding:  5\n","before adding: 5\n","             after adding:  6\n","before adding: 6\n","             after adding:  7\n","before adding: 7\n","             after adding:  8\n"]}]},{"cell_type":"code","source":["i= 1\n","while i<8:\n","   print('before adding:', i)\n","   i = i+1\n","   if i==3 :\n","     print('             after adding: ', i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W5BcqJkM-DzL","executionInfo":{"status":"ok","timestamp":1709565716662,"user_tz":-300,"elapsed":16,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"0025246d-14bc-41e4-a9d3-7b93e3989655"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before adding: 1\n","before adding: 2\n","             after adding:  3\n","before adding: 3\n","before adding: 4\n","before adding: 5\n","before adding: 6\n","before adding: 7\n"]}]},{"cell_type":"code","source":["while True:\n","  age = int(input('enter your age:'))\n","  if age >=18:\n","    print('your are applicable')\n","    break\n","  else:\n","    print('your are not applicable')\n","    print('Come next year sir..... ek wari fir')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IneDLT_LDKwX","executionInfo":{"status":"ok","timestamp":1709649841313,"user_tz":-300,"elapsed":25034,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"551892af-88d4-460b-9353-2863afd4ccf8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enter your age:7\n","your are not applicable\n","Come next year sir..... ek wari fir\n","enter your age:12\n","your are not applicable\n","Come next year sir..... ek wari fir\n","enter your age:18\n","your are applicable\n"]}]},{"cell_type":"code","source":["print(\"off\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Lm87x5fDZ_c","executionInfo":{"status":"ok","timestamp":1709565795765,"user_tz":-300,"elapsed":532,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"baeb1c53-5558-4754-f260-fe9a38c2accb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["off\n"]}]},{"cell_type":"markdown","source":["alina\n","topic for loop"],"metadata":{"id":"_ZZECA_uXe3d"}},{"cell_type":"code","source":["print(\"2 table:\")\n","for i in {\"alina \", \"appi\",\"mother\", 'brother'} :\n","  result = 2 * i\n","  print(f\"2 x {i}={result} apples {i}\")\n","  # print(\"2*\", i, '=', result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ioi2n1F5XfVw","executionInfo":{"status":"ok","timestamp":1709643186528,"user_tz":-300,"elapsed":1452,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"7a701217-1199-4c44-bc50-9b9ca96e4c5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 table:\n","2 x appi=appiappi apples appi\n","2 x mother=mothermother apples mother\n","2 x brother=brotherbrother apples brother\n","2 x alina =alina alina  apples alina \n"]}]},{"cell_type":"markdown","source":["fareeha dictionary\n"],"metadata":{"id":"Kl89wD-esAg3"}},{"cell_type":"code","source":["d1={}"],"metadata":{"id":"3mYIyGgKXf50"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(type(d1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zC23ARgEXf9F","executionInfo":{"status":"ok","timestamp":1709643586947,"user_tz":-300,"elapsed":28,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4800be52-d5b0-4a77-b110-68a2f9af9594"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'dict'>\n"]}]},{"cell_type":"code","source":["d2={1:\"burger\",\"roshan\":\"piza\"}"],"metadata":{"id":"vMr--IEVXgDn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(d2[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xan7uoMtAJA","executionInfo":{"status":"ok","timestamp":1709646004465,"user_tz":-300,"elapsed":1033,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"bf14367c-8b8b-4363-a3b3-f17f1d659e40"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["burger\n"]}]},{"cell_type":"code","source":["d2[\"ankit\"]=\"fastfood\""],"metadata":{"id":"sYXuBJ83tJoP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(type(d2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"upicIhXC2LAL","executionInfo":{"status":"ok","timestamp":1709646589705,"user_tz":-300,"elapsed":520,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c2ee1631-b3ab-4434-e38a-d3dabc8ac36b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'dict'>\n"]}]},{"cell_type":"code","source":["print(d2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z0buQYz84VJh","executionInfo":{"status":"ok","timestamp":1709646677948,"user_tz":-300,"elapsed":511,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"df65b3ca-5fdf-403f-8347-98c162b4da07"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 'my name is qazi', 'roshan': 'piza', 'ankit': {'peach', 'lazzyfood', 'organe', 'grapes', 'mangoes'}, 'leeena': 'fish', False: 'my name is majboori'}\n"]}]},{"cell_type":"code","source":["type(d2[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dcf7Q90l39Ey","executionInfo":{"status":"ok","timestamp":1709646559756,"user_tz":-300,"elapsed":526,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a85265af-5cc3-41a6-d2e0-337056efd55a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["d2[False] = 'my name is majboori'"],"metadata":{"id":"_lkdR6Ih4dZf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["d2[True] = 'my name is qazi'"],"metadata":{"id":"0237dl8-4OAt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"WP2dkIHBtGqC"}},{"cell_type":"code","source":["d2.update({\"ankit\":'slowfood'})"],"metadata":{"id":"ur8DfbWetUqg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["d2[\"ankit\"] = {'lazzyfood', \"grapes\", 'mangoes', 'peach','organe'}"],"metadata":{"id":"_m4Bcoim21mr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["d2.update({\"leeena\":\"fish\"})"],"metadata":{"id":"eSNaURYPtbYz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["d2.values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nzxwF7jUt8V5","executionInfo":{"status":"ok","timestamp":1709646333638,"user_tz":-300,"elapsed":548,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"5f06ab8c-0f97-44f6-c697-ee82116f664d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_values(['burger', 'piza', 'lazzyfood', 'fish'])"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["print(d2.keys())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ajBNcwAzt9RQ","executionInfo":{"status":"ok","timestamp":1709646341762,"user_tz":-300,"elapsed":478,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"9946ff9d-452b-49ac-f261-cb91d1d42284"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys([1, 'roshan', 'ankit', 'leeena'])\n"]}]},{"cell_type":"code","source":["print(d2.items())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V-MUR2uMuHrL","executionInfo":{"status":"ok","timestamp":1709646353029,"user_tz":-300,"elapsed":410,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"d3ae41c4-b517-4e75-d116-a72f25bb67f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_items([(1, 'burger'), ('roshan', 'piza'), ('ankit', 'lazzyfood'), ('leeena', 'fish')])\n"]}]},{"cell_type":"markdown","source":["Huma Gillani\n","list and their changes"],"metadata":{"id":"PBq5gL1R40kR"}},{"cell_type":"code","source":["my_list = [2,4,6,8,10]\n","print('main list: ', my_list)\n","my_list.append(12)\n","print('appended 12: ', my_list)\n","my_list.insert(1, 88)\n","print('inserted 1, 88 : ', my_list)\n","my_list.remove(6)\n","print('removed6 : ' ,my_list)\n","my_list.sort()\n","print('sorted list : ', my_list)\n","del my_list[2]\n","print('del list : ', my_list)\n","my_list.reverse()\n","print('reversed list : ', my_list)\n","my_list.clear()\n","print('all cleared : ', my_list)\n","my_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H-kajA_I41HR","executionInfo":{"status":"ok","timestamp":1710289123278,"user_tz":-300,"elapsed":9,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"489219e4-641e-4be8-d2b8-0e6f3d82c6e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["main list:  [2, 4, 6, 8, 10]\n","appended 12:  [2, 4, 6, 8, 10, 12]\n","inserted 1, 88 :  [2, 88, 4, 6, 8, 10, 12]\n","removed6 :  [2, 88, 4, 8, 10, 12]\n","sorted list :  [2, 4, 8, 10, 12, 88]\n","del list :  [2, 4, 10, 12, 88]\n","reversed list :  [88, 12, 10, 4, 2]\n","all cleared :  []\n"]},{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"DM63IA688gOG"}},{"cell_type":"markdown","source":["**IF - Else with multiple Condition...**"],"metadata":{"id":"nN7BsaYigEIP"}},{"cell_type":"code","source":["first=int(input(\"enter your first number: \"))\n","operator=input(\"enter operator(+,*,-,%,/): \")\n","second=int(input(\"enter your second number: \" ))\n","if operator ==\"+\" :\n","     print(\"result of addition is : \",first+second)\n","elif operator == '-':\n","  print(\"result of subtraction is : \",first-second)\n","elif operator =='*':\n","  print('result of multiplication is : ', first*second)\n","\n","else:\n","  print('pata nai........')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RtR2h--58eeN","executionInfo":{"status":"ok","timestamp":1709724106439,"user_tz":-300,"elapsed":11304,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"8b24ec3c-65dd-47e2-defc-5ffa10f84b1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enter your first number: 23\n","enter operator(+,*,-,%,/): +\n","enter your second number: 121\n","result of addition is :  144\n"]}]},{"cell_type":"markdown","source":["**Puting everything inside a Function....**"],"metadata":{"id":"Gn_e-JxHgKLT"}},{"cell_type":"code","source":["def mycal():\n","    first=int(input(\"enter your first number: \"))\n","    operator=input(\"enter operator(+,*,-,%,/): \")\n","    second=int(input(\"enter your second number: \" ))\n","    if operator ==\"+\" :\n","        print(\"result of addition is : \",first+second)\n","    elif operator == '-':\n","      print(\"result of subtraction is : \",first-second)\n","    elif operator =='*':\n","      print('result of multiplication is : ', first*second)\n","\n","    else:\n","      print('pata nai........')"],"metadata":{"id":"lu5rGuly41Ly"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mycal()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dY-EtbzY41S0","executionInfo":{"status":"ok","timestamp":1709724317781,"user_tz":-300,"elapsed":9824,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"23f21e4a-1e5b-4113-ff8d-ff8ffabce7b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enter your first number: 21\n","enter operator(+,*,-,%,/): +\n","enter your second number: 67\n","result of addition is :  88\n"]}]},{"cell_type":"code","source":["len('apple')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IWPzMGjl41W3","executionInfo":{"status":"ok","timestamp":1709724464893,"user_tz":-300,"elapsed":547,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"1ebe6f81-101b-4616-f1bd-7f73254494ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["def table(number):\n"," number = int(number)\n"," print(f\" table of {number}:\")\n"," for i in range(1,11) :\n","    result = number * i\n","    print(f\"{number} x {i} = {result}\")\n","    # print(\"2*\", i, '=', result)"],"metadata":{"id":"1_42FvsjhPIu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["table(16)\n","n = 17\n","# len(n)\n","print(type(n))\n","print(n)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fdxtmCWXiDsn","executionInfo":{"status":"ok","timestamp":1709725504667,"user_tz":-300,"elapsed":365,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"92a0fe20-e2b2-43e3-fc92-7406cfb4e9a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" table of 16:\n","16 x 1 = 16\n","16 x 2 = 32\n","16 x 3 = 48\n","16 x 4 = 64\n","16 x 5 = 80\n","16 x 6 = 96\n","16 x 7 = 112\n","16 x 8 = 128\n","16 x 9 = 144\n","16 x 10 = 160\n","<class 'int'>\n","17\n"]}]},{"cell_type":"code","source":["type()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"wCImW8EDiEkC","executionInfo":{"status":"error","timestamp":1709725166132,"user_tz":-300,"elapsed":15,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"1832a6f4-fa07-4872-e4ce-f8f6621a486c"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"type() takes 1 or 3 arguments","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-ff6dcb82abed>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: type() takes 1 or 3 arguments"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.array([1,21,2312,312,31,312,13,1231])\n","\n","\n","for i in a:\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2kBCN0ZaiIeI","executionInfo":{"status":"ok","timestamp":1709727524441,"user_tz":-300,"elapsed":503,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4de9c627-3436-428b-9771-f7c0485ec77b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","21\n","2312\n","312\n","31\n","312\n","13\n","1231\n"]}]},{"cell_type":"code","source":["53//2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QF7uT7vs51f","executionInfo":{"status":"ok","timestamp":1709729988431,"user_tz":-300,"elapsed":1759,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"0c7e3c25-e805-40bf-b80e-594f0c789e05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["26"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["def primeNumberCheck():\n","  num = int(input(\"Enter a number: \"))\n","  check = 0\n","  if  num>=0:\n","    for i in range(2, num//2):\n","       if(num % i) == 0:\n","         check += 1\n","       else:\n","         continue\n","  if  check>=1:\n","      print(check)\n","      print(\"its a Composite Number\")\n","  else:\n","      print(check)\n","      print(\"its a prime number\")"],"metadata":{"id":"dnLiFJgG2Rup"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["primeNumberCheck()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yE3gXrUJ56qT","executionInfo":{"status":"ok","timestamp":1709731723163,"user_tz":-300,"elapsed":2985,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"0db11ee7-64b1-4dee-b539-d68789a7acbe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 71\n","0\n","its a prime number\n"]}]},{"cell_type":"code","source":["def PrimeNumber():\n","    num = int(input(\"Enter a number: \"))\n","    for i in range(2, num ):\n","        if num % i == 0:\n","          print(num, \"is a prime number.\")\n","        else:\n","          print(num, \" is a composite number.\")\n","\n","\n","# def check_number():\n","#     if PrimeNumber(num):\n","#     else:\n"],"metadata":{"id":"DTXSmeCP592V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# check_number()"],"metadata":{"id":"yZ3PF564HG4L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["PrimeNumber()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K_gOCVRzIQu8","executionInfo":{"status":"ok","timestamp":1709734801371,"user_tz":-300,"elapsed":15888,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"32c1f45a-c802-4367-96d9-c2322b904d88"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 23\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n","23  is a composite number.\n"]}]},{"cell_type":"markdown","source":["Classes by Haris Rehman"],"metadata":{"id":"RybxLPxZPN9J"}},{"cell_type":"code","source":["class Car:\n","  color=\"white\"\n","  model=2023\n","  def message(self):\n","   print(\"Allah Hafiz\")\n","obj=Car()\n","print(obj.color)\n","print(obj.model)\n","obj.message()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dwqdjNzUIeHw","executionInfo":{"status":"ok","timestamp":1709736933408,"user_tz":-300,"elapsed":37,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"05e8da5b-52ff-4123-ef29-b5202539797d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["white\n","2023\n","Allah Hafiz\n"]}]},{"cell_type":"markdown","source":["**program for Iot power and resulting....**"],"metadata":{"id":"B10BF7iJ0G5b"}},{"cell_type":"code","source":["def iota_calculator(power):\n","  if power >=0:\n","    if power % 4 == 0:\n","       return \"1\"\n","    elif power % 4 == 1:\n","       return \"i\"\n","    elif power % 4 == 2:\n","       return \"-1\"\n","    else:\n","       return \"-i\"\n","  else:\n","    if (-power) % 4 == 0:\n","        return \"-1\"\n","    elif (-power) % 4 == 1:\n","        return \"-i\"\n","    elif (-power) % 4 == 2:\n","        return \"-1\"\n","    else:\n","        return \"i\"\n","\n","# def main():\n","user_power = int(input('enter the power of iota:'))\n","result = iota_calculator(user_power)\n","print(f\"the result of iota^{user_power} is:{result}\")\n","#if __name__ == \"__main__\":\n","# main()"],"metadata":{"id":"Le2tUkou0Jiz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["iota_powers = {0: \"1\", 1: \"i\", 2: \"-1\", 3: \"-i\"}\n","\n","user_input = int(input(\"Enter the power of iota: \"))\n","b = user_input % 4\n","print('reminder and value : ', b)\n","result = iota_powers[b]\n","print(f\"The value of iota raised to the power{user_input} is: {result}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d-w8EUeON5sf","executionInfo":{"status":"ok","timestamp":1709820111709,"user_tz":-300,"elapsed":4273,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"f0a22685-8849-4e36-9177-f5684f4f88c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the power of iota: 345643234\n","reminder and value :  2\n","The value of iota raised to the power345643234 is: -1\n"]}]},{"cell_type":"code","source":["io = [\"1\",'i',\"-1\",'-i']\n","\n","user_input = int(input(\"Enter the power of iota: \"))\n","b = user_input % 4\n","print('reminder and value : ', b)\n","result = io[b]\n","print(f\"The value of iota raised to the power{user_input} is: {result}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vwk-RrPJAh2A","executionInfo":{"status":"ok","timestamp":1709820045627,"user_tz":-300,"elapsed":3169,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a66676d8-c7b0-4c69-c4d5-fcefc6d4dda1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the power of iota: 2345434\n","reminder and value :  2\n","The value of iota raised to the power2345434 is: -1\n"]}]},{"cell_type":"code","source":["iota_powers = {0: \"1\", 1: \"i\", 2: \"-1\", 3: \"-i\"}\n","io = [1,'i',-1,'-i']\n","print(io)\n","print(type(io))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x_Z9onbBGPNV","executionInfo":{"status":"ok","timestamp":1709819671894,"user_tz":-300,"elapsed":20,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a755c0c4-620e-43d1-f223-4b46a29e9fe6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 'i', -1, '-i']\n","<class 'list'>\n"]}]},{"cell_type":"code","source":["type(iota_powers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ptlDMbPTGPRE","executionInfo":{"status":"ok","timestamp":1709819572569,"user_tz":-300,"elapsed":11,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c29cbfd1-f99d-4307-b1c5-9bb69406bb42"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["iota_powers.values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DUbfRjMZGPU4","executionInfo":{"status":"ok","timestamp":1709818462188,"user_tz":-300,"elapsed":13,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a800122e-9102-49de-da27-504fd7eedc89"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_values(['1', 'i', '-1', '-i'])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["a = 'today is a very good day'\n","b = [1,232,2424,424,131,313,1313,13]\n","c = {123 , 'grapes'}\n","d = {123: 'banana'}\n","print('type of a : ', type(a))\n","print('type of b : ', type(b))\n","print('type of c : ', type(c))\n","print('type of d : ', type(d))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iE4fQ-PGGPYB","executionInfo":{"status":"ok","timestamp":1709819216821,"user_tz":-300,"elapsed":7,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"80c0768c-14bd-465f-c444-1436a4cfd9be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["type of a :  <class 'str'>\n","type of b :  <class 'list'>\n","type of c :  <class 'set'>\n","type of d :  <class 'dict'>\n"]}]},{"cell_type":"code","source":["for i in d:\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jj5uD3UqKtbC","executionInfo":{"status":"ok","timestamp":1709819283641,"user_tz":-300,"elapsed":22,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"73747dff-a41b-4699-808c-dcec34e32e68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["123\n"]}]},{"cell_type":"code","source":["for i in c:\n","  print('value is : ', i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5jlRozk-J1LY","executionInfo":{"status":"ok","timestamp":1709819187797,"user_tz":-300,"elapsed":62,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"420a8bed-8668-4c9a-ebc6-f1cd29a53778"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["value is :  grapes\n","value is :  123\n"]}]},{"cell_type":"code","source":["b[3\n","  ]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zhT3hVBlJsa3","executionInfo":{"status":"ok","timestamp":1709818977327,"user_tz":-300,"elapsed":40,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"396d5fb5-e8e8-4078-8966-54eb86579045"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["424"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["a[6:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"fMDHvO7fIdzw","executionInfo":{"status":"ok","timestamp":1709818660196,"user_tz":-300,"elapsed":10,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"f521c704-a47a-472d-8653-ea9dee66bfc4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'is a'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["b[6:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TTqPk4IjIgOW","executionInfo":{"status":"ok","timestamp":1709818931696,"user_tz":-300,"elapsed":26,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4334bac9-3d21-463b-abbf-06e8e26f01c2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1313, 13]"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["import cmath\n","a = int(input(\"Enter number (a!=0): \"))\n","b = int(input(\"ENter number for b : \"))\n","c = int(input(\"Enter number for c : \" ))\n","d = (b**2) - (4*a*c)\n","root1 =  ((-b)-((d**(0.5))))/(2*a)\n","root2 =  ((-b)+((d**(0.5))))/(2*a)\n","print(\"th-e roots are\", root1, \"and\", root2)"],"metadata":{"id":"7dQFEK3cJk74","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709902245356,"user_tz":-300,"elapsed":14158,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"57cce8ad-009f-4790-ee6f-ab7597052134"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter number (a!=0): 1\n","ENter number for b : -5\n","Enter number for c : 6\n","the roots are 2.0 and 3.0\n"]}]},{"cell_type":"code","source":["type(root1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LBvrS6IB3Olp","executionInfo":{"status":"ok","timestamp":1709898243135,"user_tz":-300,"elapsed":5,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"8b6404b5-984c-44ff-80ba-fc72d570e031"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["complex"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["Classes By Haris"],"metadata":{"id":"2DHCPUfYNM1G"}},{"cell_type":"code","source":["name=\"haris\"\n","age=22\n","def message():\n","    print(\"Class have some properties\")\n","\n","print(name)\n","print(age)\n","message()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j3bA0QSN4JcW","executionInfo":{"status":"ok","timestamp":1709905723709,"user_tz":-300,"elapsed":480,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"62be99d6-3bee-4562-df2a-b8dd64efd5bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["haris\n","22\n","Class have some properties\n"]}]},{"cell_type":"code","source":["# Class\n","\n","class Car:\n","    color=\"white\"\n","    model=2023\n","    def greeting():\n","      print(\"clsss have some properties\")\n","\n","obj=Car()\n","obj1=Car()"],"metadata":{"id":"RA1_NfFQT0I7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(obj.color)\n","print(obj1.model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jl2cCUxqX2uL","executionInfo":{"status":"ok","timestamp":1709906771769,"user_tz":-300,"elapsed":462,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"ca1c0cf8-4837-40f9-c9b0-47bcc93d98a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["white\n","2023\n"]}]},{"cell_type":"code","source":["# Inheritance\n","\n","# Parent Class\n","class Vehicle:\n","   name=\"\"\n","   model=\"2001\"\n","   def show(fles):\n","    print(\"Bike is a vehicle\")\n","\n","\n","# Child Class\n","class Bike(Vehicle):\n","\n"," def color(fles):\n","  print(\"the name of the bike is :\",fles.name)\n","\n","p2 = Bike()\n","Bike.name=\"Honda\"\n","p2.show() #it is the function of parent class but we use with the object of child class it is called inheritance\n","p2.color()\n","print(p2.model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lx3d5UurT3cc","executionInfo":{"status":"ok","timestamp":1709907267326,"user_tz":-300,"elapsed":410,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c3f586d6-451a-41cd-fa8f-bea4a13db775"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Bike is a vehicle\n","the name of the bike is : Honda\n","2001\n"]}]},{"cell_type":"code","source":["def first():\n","  print('i am the first function')\n","\n","def second():\n","  first()\n","  print('I am the second Function')\n","\n"],"metadata":{"id":"8cOHsaRKZNw9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# first()\n","second()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xJ2reQD2Za4Z","executionInfo":{"status":"ok","timestamp":1709907026076,"user_tz":-300,"elapsed":443,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a461a2e9-80a5-4e8f-cc2d-0a090fdb36ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["i am the first function\n","I am the second Function\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8fXOcTdiLl2","executionInfo":{"status":"ok","timestamp":1709909264668,"user_tz":-300,"elapsed":8,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"e213b535-6d80-45d8-e28a-df887c69b5a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["iris.csv  \u001b[0m\u001b[01;34msample_data\u001b[0m/\n"]}]},{"cell_type":"code","source":["cd /content/drive/MyDrive"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GttPaRE6agFJ","executionInfo":{"status":"ok","timestamp":1709991260245,"user_tz":-300,"elapsed":29,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"29af8300-ac7f-4f86-b87a-a398bf2726dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xfNxC30xa_dF","executionInfo":{"status":"ok","timestamp":1709991264799,"user_tz":-300,"elapsed":23,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c41e9824-8546-489a-fc7b-2942e63a42f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[0m\u001b[01;34m'aaa for projects'\u001b[0m/  'Activity 6.gdoc'  \u001b[01;34m'Colab Notebooks'\u001b[0m/   iris.csv  \u001b[01;34m'Remaining Files'\u001b[0m/\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"rsxicmfAbBNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/drive/MyDrive/iris.csv')"],"metadata":{"id":"rj0wxNbWZh8C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"3B7B_9ZCiq9c","executionInfo":{"status":"ok","timestamp":1709991314498,"user_tz":-300,"elapsed":28,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"978add98-d5d1-4392-89cf-fe922127140f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Sepal.Length  Sepal.Width  Petal.Length  Petal.Width    Species\n","0             5.1          3.5           1.4          0.2     setosa\n","1             4.9          3.0           1.4          0.2     setosa\n","2             4.7          3.2           1.3          0.2     setosa\n","3             4.6          3.1           1.5          0.2     setosa\n","4             5.0          3.6           1.4          0.2     setosa\n","..            ...          ...           ...          ...        ...\n","145           6.7          3.0           5.2          2.3  virginica\n","146           6.3          2.5           5.0          1.9  virginica\n","147           6.5          3.0           5.2          2.0  virginica\n","148           6.2          3.4           5.4          2.3  virginica\n","149           5.9          3.0           5.1          1.8  virginica\n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-6add4895-e2ac-45b5-9c4d-9ee48f8d3120\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sepal.Length</th>\n","      <th>Sepal.Width</th>\n","      <th>Petal.Length</th>\n","      <th>Petal.Width</th>\n","      <th>Species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6add4895-e2ac-45b5-9c4d-9ee48f8d3120')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6add4895-e2ac-45b5-9c4d-9ee48f8d3120 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6add4895-e2ac-45b5-9c4d-9ee48f8d3120');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5281edb8-1505-4267-a13a-7fb1911c7f0c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5281edb8-1505-4267-a13a-7fb1911c7f0c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5281edb8-1505-4267-a13a-7fb1911c7f0c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"Sepal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sepal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522626,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008411,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["print(df.head(2))\n","df.tail(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":164},"id":"O2uXZ01kjOiL","executionInfo":{"status":"ok","timestamp":1709991401035,"user_tz":-300,"elapsed":19,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"dcc293d5-e9cc-43f2-ea19-920caa674f95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species\n","0           5.1          3.5           1.4          0.2  setosa\n","1           4.9          3.0           1.4          0.2  setosa\n"]},{"output_type":"execute_result","data":{"text/plain":["     Sepal.Length  Sepal.Width  Petal.Length  Petal.Width    Species\n","148           6.2          3.4           5.4          2.3  virginica\n","149           5.9          3.0           5.1          1.8  virginica"],"text/html":["\n","  <div id=\"df-22a5f63f-999b-472a-85fc-0173cfe2a0f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sepal.Length</th>\n","      <th>Sepal.Width</th>\n","      <th>Petal.Length</th>\n","      <th>Petal.Width</th>\n","      <th>Species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22a5f63f-999b-472a-85fc-0173cfe2a0f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-22a5f63f-999b-472a-85fc-0173cfe2a0f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-22a5f63f-999b-472a-85fc-0173cfe2a0f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0ea0dded-a113-4dfb-ab6a-caaf271407d9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ea0dded-a113-4dfb-ab6a-caaf271407d9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0ea0dded-a113-4dfb-ab6a-caaf271407d9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Sepal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21213203435596412,\n        \"min\": 5.9,\n        \"max\": 6.2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5.9,\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sepal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28284271247461895,\n        \"min\": 3.0,\n        \"max\": 3.4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.0,\n          3.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21213203435596475,\n        \"min\": 5.1,\n        \"max\": 5.4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5.1,\n          5.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3535533905932736,\n        \"min\": 1.8,\n        \"max\": 2.3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.8,\n          2.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J9rX1Wnfk2IF","executionInfo":{"status":"ok","timestamp":1709991413216,"user_tz":-300,"elapsed":42,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"575f2b73-3f99-4dcd-ffb5-feed23464049"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 5)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"flfFzuV2lP3X","executionInfo":{"status":"ok","timestamp":1709991415655,"user_tz":-300,"elapsed":21,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"1f668796-5877-4ad2-c2d4-cc11e09c8311"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\n","count    150.000000   150.000000    150.000000   150.000000\n","mean       5.843333     3.054000      3.758667     1.198667\n","std        0.828066     0.433594      1.764420     0.763161\n","min        4.300000     2.000000      1.000000     0.100000\n","25%        5.100000     2.800000      1.600000     0.300000\n","50%        5.800000     3.000000      4.350000     1.300000\n","75%        6.400000     3.300000      5.100000     1.800000\n","max        7.900000     4.400000      6.900000     2.500000"],"text/html":["\n","  <div id=\"df-8badc07d-c3a4-4024-96b1-fbc6158a0fc9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sepal.Length</th>\n","      <th>Sepal.Width</th>\n","      <th>Petal.Length</th>\n","      <th>Petal.Width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.843333</td>\n","      <td>3.054000</td>\n","      <td>3.758667</td>\n","      <td>1.198667</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828066</td>\n","      <td>0.433594</td>\n","      <td>1.764420</td>\n","      <td>0.763161</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8badc07d-c3a4-4024-96b1-fbc6158a0fc9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8badc07d-c3a4-4024-96b1-fbc6158a0fc9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8badc07d-c3a4-4024-96b1-fbc6158a0fc9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a87b5b22-9f36-49e2-8190-68a2bc0144f3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a87b5b22-9f36-49e2-8190-68a2bc0144f3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a87b5b22-9f36-49e2-8190-68a2bc0144f3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Sepal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.24711349471842,\n        \"min\": 0.828066127977863,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.843333333333334,\n          5.8,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sepal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.08647211421483,\n        \"min\": 0.4335943113621737,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0540000000000003,\n          3.0,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.835227940958106,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.758666666666666,\n          4.35,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.636634243409915,\n        \"min\": 0.1,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1986666666666668,\n          1.3,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["a, b, c = 'Allah', 'Hafiz', 'Sareyan nuuu'\n","\n","\n","\n","print(a,b,c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pN4tu68ilZ0W","executionInfo":{"status":"ok","timestamp":1709910302000,"user_tz":-300,"elapsed":406,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c03dd0ff-848a-4a10-a456-daf672f6a473"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Allah Hafiz Sareyan nuuu\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbJEDwsHmJmB","executionInfo":{"status":"ok","timestamp":1709992019823,"user_tz":-300,"elapsed":15,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"d18b5695-b2c6-42bc-e9c6-ee11f3be79c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[0m\u001b[01;34m'aaa for projects'\u001b[0m/  'Activity 6.gdoc'  \u001b[01;34m'Colab Notebooks'\u001b[0m/   iris.csv  \u001b[01;34m'Remaining Files'\u001b[0m/\n"]}]},{"cell_type":"code","source":["type(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"Hs4Vg21Kd2nO","executionInfo":{"status":"ok","timestamp":1709992101160,"user_tz":-300,"elapsed":981,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"697c4dcb-58b7-446c-a264-045ba83f9207"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.frame.DataFrame"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n","\n","Data structure also contains labeled axes (rows and columns).\n","Arithmetic operations align on both row and column labels. Can be\n","thought of as a dict-like container for Series objects. The primary\n","pandas data structure.\n","\n","Parameters\n","----------\n","data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n","    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n","    data is a dict, column order follows insertion-order. If a dict contains Series\n","    which have an index defined, it is aligned by its index.\n","\n","    .. versionchanged:: 0.25.0\n","       If data is a list of dicts, column order follows insertion-order.\n","\n","index : Index or array-like\n","    Index to use for resulting frame. Will default to RangeIndex if\n","    no indexing information part of input data and no index provided.\n","columns : Index or array-like\n","    Column labels to use for resulting frame when data does not have them,\n","    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n","    will perform column selection instead.\n","dtype : dtype, default None\n","    Data type to force. Only a single dtype is allowed. If None, infer.\n","copy : bool or None, default None\n","    Copy data from inputs.\n","    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n","    or 2d ndarray input, the default of None behaves like ``copy=False``.\n","    If data is a dict containing one or more Series (possibly of different dtypes),\n","    ``copy=False`` will ensure that these inputs are not copied.\n","\n","    .. versionchanged:: 1.3.0\n","\n","See Also\n","--------\n","DataFrame.from_records : Constructor from tuples, also record arrays.\n","DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n","read_csv : Read a comma-separated values (csv) file into DataFrame.\n","read_table : Read general delimited file into DataFrame.\n","read_clipboard : Read text from clipboard into DataFrame.\n","\n","Notes\n","-----\n","Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n","\n","Examples\n","--------\n","Constructing DataFrame from a dictionary.\n","\n","&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n","&gt;&gt;&gt; df = pd.DataFrame(data=d)\n","&gt;&gt;&gt; df\n","   col1  col2\n","0     1     3\n","1     2     4\n","\n","Notice that the inferred dtype is int64.\n","\n","&gt;&gt;&gt; df.dtypes\n","col1    int64\n","col2    int64\n","dtype: object\n","\n","To enforce a single dtype:\n","\n","&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n","&gt;&gt;&gt; df.dtypes\n","col1    int8\n","col2    int8\n","dtype: object\n","\n","Constructing DataFrame from a dictionary including Series:\n","\n","&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n","&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n","   col1  col2\n","0     0   NaN\n","1     1   NaN\n","2     2   2.0\n","3     3   3.0\n","\n","Constructing DataFrame from numpy ndarray:\n","\n","&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n","...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n","&gt;&gt;&gt; df2\n","   a  b  c\n","0  1  2  3\n","1  4  5  6\n","2  7  8  9\n","\n","Constructing DataFrame from a numpy ndarray that has labeled columns:\n","\n","&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n","...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n","&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n","...\n","&gt;&gt;&gt; df3\n","   c  a\n","0  3  1\n","1  6  4\n","2  9  7\n","\n","Constructing DataFrame from dataclass:\n","\n","&gt;&gt;&gt; from dataclasses import make_dataclass\n","&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n","&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n","   x  y\n","0  0  0\n","1  0  3\n","2  2  3</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 475);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"IgZHTM8-d2th","executionInfo":{"status":"ok","timestamp":1709992138290,"user_tz":-300,"elapsed":559,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"b33d6d1d-76f5-4c54-90f3-46da99eda436"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species\n","0           5.1          3.5           1.4          0.2  setosa\n","1           4.9          3.0           1.4          0.2  setosa\n","2           4.7          3.2           1.3          0.2  setosa\n","3           4.6          3.1           1.5          0.2  setosa\n","4           5.0          3.6           1.4          0.2  setosa\n","5           5.4          3.9           1.7          0.4  setosa\n","6           4.6          3.4           1.4          0.3  setosa\n","7           5.0          3.4           1.5          0.2  setosa\n","8           4.4          2.9           1.4          0.2  setosa\n","9           4.9          3.1           1.5          0.1  setosa"],"text/html":["\n","  <div id=\"df-72a9dba8-438c-490d-a45b-ec01d0fa84c9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sepal.Length</th>\n","      <th>Sepal.Width</th>\n","      <th>Petal.Length</th>\n","      <th>Petal.Width</th>\n","      <th>Species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5.4</td>\n","      <td>3.9</td>\n","      <td>1.7</td>\n","      <td>0.4</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.6</td>\n","      <td>3.4</td>\n","      <td>1.4</td>\n","      <td>0.3</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.0</td>\n","      <td>3.4</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.4</td>\n","      <td>2.9</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4.9</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.1</td>\n","      <td>setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72a9dba8-438c-490d-a45b-ec01d0fa84c9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-72a9dba8-438c-490d-a45b-ec01d0fa84c9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-72a9dba8-438c-490d-a45b-ec01d0fa84c9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0082deab-66bf-4f41-86a9-7b78556fbca1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0082deab-66bf-4f41-86a9-7b78556fbca1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0082deab-66bf-4f41-86a9-7b78556fbca1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"Sepal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sepal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522626,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008411,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df.hist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"73Ju8qb_d222","executionInfo":{"status":"ok","timestamp":1709992218703,"user_tz":-300,"elapsed":2080,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"590150f7-bf25-4b39-e4c1-4ece8f596ea5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[<Axes: title={'center': 'Sepal.Length'}>,\n","        <Axes: title={'center': 'Sepal.Width'}>],\n","       [<Axes: title={'center': 'Petal.Length'}>,\n","        <Axes: title={'center': 'Petal.Width'}>]], dtype=object)"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q_9pgj0kd26y","executionInfo":{"status":"ok","timestamp":1709992346186,"user_tz":-300,"elapsed":716,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"609a4264-24a9-455c-8c74-7a72692dda90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width',\n","       'Species'],\n","      dtype='object')"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df['Sepal.Length'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L1uPMUv6fHrV","executionInfo":{"status":"ok","timestamp":1709992361273,"user_tz":-300,"elapsed":8,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"2aca8d72-9d5f-40cc-ec2c-f97b654473b5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0    10\n","5.1     9\n","6.3     9\n","5.7     8\n","6.7     8\n","5.8     7\n","5.5     7\n","6.4     7\n","4.9     6\n","5.4     6\n","6.1     6\n","6.0     6\n","5.6     6\n","4.8     5\n","6.5     5\n","6.2     4\n","7.7     4\n","6.9     4\n","4.6     4\n","5.2     4\n","5.9     3\n","4.4     3\n","7.2     3\n","6.8     3\n","6.6     2\n","4.7     2\n","7.6     1\n","7.4     1\n","7.3     1\n","7.0     1\n","7.1     1\n","5.3     1\n","4.3     1\n","4.5     1\n","7.9     1\n","Name: Sepal.Length, dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df['Species'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d5WnYh7dfLYA","executionInfo":{"status":"ok","timestamp":1709992676683,"user_tz":-300,"elapsed":629,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a737571e-13d7-47cb-f1b5-6f124c9fc560"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['setosa', 'versicolor', 'virginica'], dtype=object)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"x6RDLnlXgYfz","executionInfo":{"status":"ok","timestamp":1709993108136,"user_tz":-300,"elapsed":24,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"3d3aadbd-6a48-453c-aac2-a5bb09e3250f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species\n","0           5.1          3.5           1.4          0.2  setosa\n","1           4.9          3.0           1.4          0.2  setosa"],"text/html":["\n","  <div id=\"df-54992017-9859-4e15-aa6e-13cf6c9b9fc7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sepal.Length</th>\n","      <th>Sepal.Width</th>\n","      <th>Petal.Length</th>\n","      <th>Petal.Width</th>\n","      <th>Species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54992017-9859-4e15-aa6e-13cf6c9b9fc7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-54992017-9859-4e15-aa6e-13cf6c9b9fc7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-54992017-9859-4e15-aa6e-13cf6c9b9fc7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6b3ca44d-bd0f-45c3-8254-50f991f6cf1d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b3ca44d-bd0f-45c3-8254-50f991f6cf1d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6b3ca44d-bd0f-45c3-8254-50f991f6cf1d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"Sepal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sepal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522626,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petal.Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008411,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df['Sepal.Length'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KUSLd8m8iB1F","executionInfo":{"status":"ok","timestamp":1709993153008,"user_tz":-300,"elapsed":572,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"20176687-5c5f-44e6-a917-e7ebed3e97c2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5.1, 4.9, 4.7, 4.6, 5. , 5.4, 4.4, 4.8, 4.3, 5.8, 5.7, 5.2, 5.5,\n","       4.5, 5.3, 7. , 6.4, 6.9, 6.5, 6.3, 6.6, 5.9, 6. , 6.1, 5.6, 6.7,\n","       6.2, 6.8, 7.1, 7.6, 7.3, 7.2, 7.7, 7.4, 7.9])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df['Sepal.Length'].nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83UGNraBiLP_","executionInfo":{"status":"ok","timestamp":1709993172568,"user_tz":-300,"elapsed":21,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"2e2f103f-4f98-43bd-acc0-e7bbe6d9ef2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["35"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["df['Sepal.Length'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-16iNOSkiPV3","executionInfo":{"status":"ok","timestamp":1709993195990,"user_tz":-300,"elapsed":7,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"7e5e2aee-c585-417f-a662-7342738872d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0    10\n","5.1     9\n","6.3     9\n","5.7     8\n","6.7     8\n","5.8     7\n","5.5     7\n","6.4     7\n","4.9     6\n","5.4     6\n","6.1     6\n","6.0     6\n","5.6     6\n","4.8     5\n","6.5     5\n","6.2     4\n","7.7     4\n","6.9     4\n","4.6     4\n","5.2     4\n","5.9     3\n","4.4     3\n","7.2     3\n","6.8     3\n","6.6     2\n","4.7     2\n","7.6     1\n","7.4     1\n","7.3     1\n","7.0     1\n","7.1     1\n","5.3     1\n","4.3     1\n","4.5     1\n","7.9     1\n","Name: Sepal.Length, dtype: int64"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["df['Sepal.Length'].min()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m359b_g9iXMH","executionInfo":{"status":"ok","timestamp":1709993285343,"user_tz":-300,"elapsed":605,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"2acad82c-5618-4faf-f2d3-feb934c646f9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4.3"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["df['Sepal.Length'].max()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ou10VCnOitGp","executionInfo":{"status":"ok","timestamp":1709993295323,"user_tz":-300,"elapsed":749,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"6c39405a-ab0e-4cb2-e6b8-0698e100b126"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7.9"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["df['Sepal.Length'].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RwRRv13IivgX","executionInfo":{"status":"ok","timestamp":1709993299852,"user_tz":-300,"elapsed":14,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"41fd4312-53e0-4810-eba4-91d473556abf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.843333333333334"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["df['Sepal.Length'].std()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vVYTM-DHiwgl","executionInfo":{"status":"ok","timestamp":1709993307448,"user_tz":-300,"elapsed":7,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"1c607e51-5f4b-44c8-f31d-2174993020b6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.828066127977863"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df['Sepal.Length'].hist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"O-Or-iyXiyYt","executionInfo":{"status":"ok","timestamp":1709993316523,"user_tz":-300,"elapsed":778,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"bfd1d62c-d3f7-4240-e8ce-8f8f0b23c5ce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":28},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We begin by importing the required libraries: NumPy, Pandas, and load_iris from sklearn.datasets.\n","Next, we load the Iris dataset using the load_iris function from the scikit-learn library.\n","We then convert the dataset into a Pandas DataFrame using pd.DataFrame() and np.c_[] to concatenate the data and target variables.\n","Finally, we display the first few rows of the DataFrame using the head() function to get a glimpse of the dataset."],"metadata":{"id":"ET4YW3K5BHu_"}},{"cell_type":"code","source":["# Import necessary libraries\n","import numpy as npyyy\n","import pandas as pd\n","from sklearn.datasets import load_iris\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","\n","# Convert the dataset into a DataFrame\n","iris_df = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n","                       columns= iris['feature_names'] + ['target'])\n","\n","# Display the first few rows of the dataset\n","iris_df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"1Ij1Z3j5i0gg","executionInfo":{"status":"ok","timestamp":1710160996556,"user_tz":-300,"elapsed":1809,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a7e74787-ef8f-4204-986e-6b28a8bac953"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n","0                5.1               3.5                1.4               0.2   \n","1                4.9               3.0                1.4               0.2   \n","\n","   target  \n","0     0.0  \n","1     0.0  "],"text/html":["\n","  <div id=\"df-dbab15cf-527e-478e-84c2-4e31f38442c1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dbab15cf-527e-478e-84c2-4e31f38442c1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dbab15cf-527e-478e-84c2-4e31f38442c1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dbab15cf-527e-478e-84c2-4e31f38442c1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-45f8d5c9-4e0a-4959-a057-6025f78e40c6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45f8d5c9-4e0a-4959-a057-6025f78e40c6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-45f8d5c9-4e0a-4959-a057-6025f78e40c6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"iris_df","summary":"{\n  \"name\": \"iris_df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8192319205190405,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          1.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We use the shape attribute to check the dimensions of the dataset, which returns a tuple containing the number of rows and columns in the DataFrame."],"metadata":{"id":"l9zz64_QBLL4"}},{"cell_type":"code","source":["# Check the shape of the dataset\n","iris_df.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ui0KM1kN973N","executionInfo":{"status":"ok","timestamp":1710161192354,"user_tz":-300,"elapsed":8,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"8c32d3ad-9578-417e-fff3-da96e9faa202"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 5)"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["Explanation:\n","\n","To ensure data integrity, we use the isnull() function to identify missing values in the dataset.\n","The sum() function is then applied to count the number of missing values in each column."],"metadata":{"id":"YIhwVuiCBQx-"}},{"cell_type":"code","source":["# Check for missing values\n","iris_df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2IwK41XB98Mr","executionInfo":{"status":"ok","timestamp":1710161242164,"user_tz":-300,"elapsed":755,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"c931902b-036f-4ab2-a819-c42b64419e02"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal length (cm)    0\n","sepal width (cm)     0\n","petal length (cm)    0\n","petal width (cm)     0\n","target               0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We use the describe() function to generate summary statistics of the numerical columns in the dataset, including count, mean, standard deviation, minimum, and maximum values, as well as quartiles."],"metadata":{"id":"qQXUU6yUBUVD"}},{"cell_type":"code","source":["# Summary statistics of the dataset\n","iris_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"GwAvKGOn98Sl","executionInfo":{"status":"ok","timestamp":1710151463365,"user_tz":-300,"elapsed":95,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"4a9d9a72-80f9-40fa-edaa-4da3a05e3a33"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","count         150.000000        150.000000         150.000000   \n","mean            5.843333          3.057333           3.758000   \n","std             0.828066          0.435866           1.765298   \n","min             4.300000          2.000000           1.000000   \n","25%             5.100000          2.800000           1.600000   \n","50%             5.800000          3.000000           4.350000   \n","75%             6.400000          3.300000           5.100000   \n","max             7.900000          4.400000           6.900000   \n","\n","       petal width (cm)      target  \n","count        150.000000  150.000000  \n","mean           1.199333    1.000000  \n","std            0.762238    0.819232  \n","min            0.100000    0.000000  \n","25%            0.300000    0.000000  \n","50%            1.300000    1.000000  \n","75%            1.800000    2.000000  \n","max            2.500000    2.000000  "],"text/html":["\n","  <div id=\"df-2a9b6b34-3768-49c4-85cd-cf8856771683\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.843333</td>\n","      <td>3.057333</td>\n","      <td>3.758000</td>\n","      <td>1.199333</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828066</td>\n","      <td>0.435866</td>\n","      <td>1.765298</td>\n","      <td>0.762238</td>\n","      <td>0.819232</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","      <td>2.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a9b6b34-3768-49c4-85cd-cf8856771683')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2a9b6b34-3768-49c4-85cd-cf8856771683 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2a9b6b34-3768-49c4-85cd-cf8856771683');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7ea2d68d-5a21-4bb4-bbd1-593742981d64\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7ea2d68d-5a21-4bb4-bbd1-593742981d64')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7ea2d68d-5a21-4bb4-bbd1-593742981d64 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"iris_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.24711349471842,\n        \"min\": 0.828066127977863,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.843333333333334,\n          5.8,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.08617800869865,\n        \"min\": 0.4358662849366982,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0573333333333337,\n          3.0,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.83521261418364,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.7580000000000005,\n          4.35,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.63664824261751,\n        \"min\": 0.1,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1993333333333336,\n          1.3,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.69404575122032,\n        \"min\": 0.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.0,\n          2.0,\n          0.8192319205190405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["Explanation:\n","\n","This code extracts the unique values present in the target variable of the Iris dataset.\n","The unique() function returns an array of unique values in the specified column."],"metadata":{"id":"WH7TFE_KBZl1"}},{"cell_type":"code","source":["# Extracting unique values of the target variable\n","iris_df['target'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ynmaU5lP98WL","executionInfo":{"status":"ok","timestamp":1710151474184,"user_tz":-300,"elapsed":18,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"6afd5a5e-0997-499b-fce7-507f6739b408"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1., 2.])"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We use the groupby() function to group the data by the target variable.\n","Then, we calculate the mean of each feature for each target class using the mean() function."],"metadata":{"id":"jk7UYuyMBaoN"}},{"cell_type":"code","source":["# Grouping the data by target variable and calculating mean\n","iris_df.groupby('target').mean()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"0RAAzvaz98Z4","executionInfo":{"status":"ok","timestamp":1710151490419,"user_tz":-300,"elapsed":24,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"31425ae5-d936-4afb-ee12-4ecdd855c976"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","target                                                           \n","0.0                 5.006             3.428              1.462   \n","1.0                 5.936             2.770              4.260   \n","2.0                 6.588             2.974              5.552   \n","\n","        petal width (cm)  \n","target                    \n","0.0                0.246  \n","1.0                1.326  \n","2.0                2.026  "],"text/html":["\n","  <div id=\"df-3d6d244e-12fa-490e-a357-071d0640a86e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.0</th>\n","      <td>5.006</td>\n","      <td>3.428</td>\n","      <td>1.462</td>\n","      <td>0.246</td>\n","    </tr>\n","    <tr>\n","      <th>1.0</th>\n","      <td>5.936</td>\n","      <td>2.770</td>\n","      <td>4.260</td>\n","      <td>1.326</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>6.588</td>\n","      <td>2.974</td>\n","      <td>5.552</td>\n","      <td>2.026</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d6d244e-12fa-490e-a357-071d0640a86e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3d6d244e-12fa-490e-a357-071d0640a86e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3d6d244e-12fa-490e-a357-071d0640a86e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e43d649a-53e1-4736-ba98-c554bf047be4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e43d649a-53e1-4736-ba98-c554bf047be4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e43d649a-53e1-4736-ba98-c554bf047be4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"iris_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          1.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7950605846936022,\n        \"min\": 5.006,\n        \"max\": 6.587999999999999,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5.006,\n          5.936,\n          6.587999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3368224062222306,\n        \"min\": 2.77,\n        \"max\": 3.428,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.428,\n          2.77,\n          2.9739999999999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0907003611230377,\n        \"min\": 1.462,\n        \"max\": 5.5520000000000005,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.462,\n          4.26,\n          5.5520000000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8967348177322731,\n        \"min\": 0.24600000000000002,\n        \"max\": 2.026,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.24600000000000002,\n          1.3259999999999998,\n          2.026\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Sample data\n","data = {\n","    'Year': [2020, 2020, 2020, 2020, 2021, 2021, 2021, 2021],\n","    'City': ['New York', 'New York', 'Los Angeles', 'Los Angeles',\n","             'New York', 'New York', 'Los Angeles', 'Los Angeles'],\n","    'Value': [100, 150, 200, 250, 120, 180, 220, 260]\n","}\n","\n","# Creating a DataFrame\n","df = pd.DataFrame(data)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"zAS6BD_lo3W1","executionInfo":{"status":"ok","timestamp":1710162795516,"user_tz":-300,"elapsed":19,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"ceb00d26-de56-4fc7-abd8-504402a366b0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Year         City  Value\n","0  2020     New York    100\n","1  2020     New York    150\n","2  2020  Los Angeles    200\n","3  2020  Los Angeles    250\n","4  2021     New York    120"],"text/html":["\n","  <div id=\"df-cabe242c-be46-42f0-aa26-5e1bfa9f387e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>City</th>\n","      <th>Value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020</td>\n","      <td>New York</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020</td>\n","      <td>New York</td>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020</td>\n","      <td>Los Angeles</td>\n","      <td>200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020</td>\n","      <td>Los Angeles</td>\n","      <td>250</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021</td>\n","      <td>New York</td>\n","      <td>120</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cabe242c-be46-42f0-aa26-5e1bfa9f387e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cabe242c-be46-42f0-aa26-5e1bfa9f387e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cabe242c-be46-42f0-aa26-5e1bfa9f387e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ccc23ee6-bfef-4b10-a94d-b75310804082\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccc23ee6-bfef-4b10-a94d-b75310804082')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ccc23ee6-bfef-4b10-a94d-b75310804082 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2020,\n        \"max\": 2021,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2021,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Los Angeles\",\n          \"New York\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58,\n        \"min\": 100,\n        \"max\": 260,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          150,\n          180\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["\n","# Grouping by Year and City and aggregating the 'Value'\n","grouped_data = df.groupby(['Year', 'City']).sum()\n","\n","print(grouped_data)\n","\n","# This code first creates a sample DataFrame with columns 'Year', 'City', and 'Value'.\n","#  Then it groups the data by both 'Year' and 'City' columns and aggregates the\n","#   'Value' column using the sum() function. Finally, it prints the grouped data."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2LmZI2ApWP_","executionInfo":{"status":"ok","timestamp":1710162821628,"user_tz":-300,"elapsed":524,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"0b741a1a-a5b4-45be-a0da-795100959bf9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                  Value\n","Year City              \n","2020 Los Angeles    450\n","     New York       250\n","2021 Los Angeles    480\n","     New York       300\n"]}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We use the heatmap() function from the Seaborn library to visualize the correlation matrix of the Iris dataset.\n","This heatmap displays the correlation coefficients between different features, with higher values indicating stronger correlations."],"metadata":{"id":"ve8jwuepBdtG"}},{"cell_type":"code","source":["# Visualizing the correlation matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(iris_df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)\n","plt.title('Correlation Matrix of Iris Dataset')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":699},"id":"4aNNiTDa98d3","executionInfo":{"status":"ok","timestamp":1710151510552,"user_tz":-300,"elapsed":2823,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"2cac644b-e9f7-41ac-c790-17d8f7d6957d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Create a plot without axes\n","fig, ax = plt.subplots()\n","ax.axis('off')  # Turn off axes\n","\n","# Set the text properties and display \"Allah Hafiz\"\n","plt.text(0.5, 0.5, 'Allah Hafiz', fontsize=40, ha='center', va='center')\n","\n","# Show the plot\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"Z1lSh4LZ3kJt","executionInfo":{"status":"ok","timestamp":1710166546416,"user_tz":-300,"elapsed":1938,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"a8ca4821-609c-43d7-8fde-35ff77a0a67d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAgMAAAGFCAYAAABg2vAPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAZXElEQVR4nO3deZSVdf3A8c8AyiIgIu4RopGJO4ohLoAbaDCKuAEJpHmOHTXNjHMis+WXnjTTo0fUpOPIVkCKCmLuEBC4RQaKqJCIC2gsAwSBwNzfHx3N4bnoMHNn/b5e58wffO99vs934AHec+9zn6col8vlAgBIVqPaXgAAULvEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEAAAkTgwAQOLEANWuZ8+eUVRUVO5rxowZFdp2xowZmW179uxZreutDtt/D0VFRbW9JOqABQsWxI033hi9e/eOAw88MNq0aRONGjXKHCuvvvpque2GDRuWec6DDz5YK98DDUOT2l4AQGref//9uOyyy+Lpp5+u7aVARHhlIEmPPPJI3p9Ui4qK4sknn6zt5VFP5HvFp9Cv2jz44IN5j9OlS5cWdD81aeHChXHMMccIAeoUMZCgBx54YIePlZSU1OBKIC2bNm2KAQMGxMqVK2t7KVCOtwkSs2LFii/86f+xxx6L1atXR9u2bWtwVZCGcePGxaJFizLj3bt3j4EDB8YhhxwSLVu2zJxT8vWvf72mlkiixEBixowZE1u3bt3h45s3b44//OEPcdVVV9XgqiANo0aNyoxdeeWVcffdd9fCauB/vE2QmIq8DeCtAii8jRs3xrx588qNNWvWLG6++eadnuvBBx+MXC5X7mvYsGEFWikpEgMJmTt3buYlyl133TUaNSp/GMybNy/mz59fk0uDBm/BggWZV+W6dOkSrVu3rqUVwf+IgYTkO3HwnHPOiVNPPbVCzwUqL99Jg1/5yldqYSWQJQYSsXHjxpg0aVJmfMiQITF06NDM+Pjx4+OTTz6piaVBEtauXZsZa968eS2sBLLEQCIeeuihWLduXbmxvffeO/r06RPnnXdetGrVqtxjK1eujKlTp9bkEqFBE9fUZT5NkIh8JwUOGjQomjRpEk2aNInzzz8/85ySkpIYMGBATS2xRq1duzYWLVoUixcvjjVr1sT69eujSZMm0bZt22jbtm0ccsghceihh9bKZYNXrlwZr7zySixevDjWrVsXLVq0iHbt2sXBBx8cxx9/fDRu3LjG19TQ5HK5eO+992LRokXx3nvvxbp162Ljxo3RqlWr2GOPPWKvvfaK4447Ltq1a1fbS4WakaPBW7JkSa6oqCgXEeW+/v73v3/2nBkzZmQeb9y4ce7DDz+s8v579OiRmXv69OkV2nb69OmZbXv06LHTa1izZk1u7NixuUsvvTR30EEHZebM99WuXbvcgAEDKrzWL5Jv/u1NmTIl16tXr1yjRo12uKY2bdrkvvOd7+SWLl1a5TVVVb4/18r82XyRkpKSvL8P77zzzk7P9dprr+VuvfXW3Nlnn51r3br1l/75FxUV5Tp37pwbPnz4Tv89eOeddyp0jH3ZV4cOHfLOP3To0MxzS0pKvnBN+f4uFfLry/ZP3eZtggR8+jGkzzviiCPi6KOP/uzXp5xyShx44IHlnrNt27YYM2ZMDayw+ixYsCCKi4tjn332iUsuuSQeeOCB+Oc//1mhbVeuXBkPP/xw9OrVK7p37x5vvPFGtaxxxYoV0adPnyguLo7p06dHWVnZDp9bWloaJSUlccghh8TIkSOrZT0Nzf333x9HHHFEHH744TF8+PB44oknMm+Z5ZPL5WLhwoVx6623RseOHePaa6/1Uj8Nlhho4MrKymL06NGZ8e1PGiwqKoohQ4Zknlff74T24osvxtSpU6v8j/jcuXOjW7du8fjjjxdoZf/15ptvxvHHHx9PPfXUTm23efPmuOqqqyr1GfXUjBkzJl577bUqzbF58+a48847o2fPnrFixYoCrQzqDjHQwD377LOxbNmycmONGzeOwYMHZ56bLwYWLVoUc+bMqbb11aa2bdvGYYcdFt27d4/TTjstjj/++OjQocMOn79u3bo477zz4uWXXy7I/j/88MM444wz4r333is33rp16zjyyCOjV69e0bVr19hzzz13OMcNN9wQs2bNKsh6UlNUVBQdOnSIo48+Onr06BE9e/aMY445Jtq0abPDbebOnRvFxcWxZcuWmlso1AAnEDZw+U4cPPPMM2PffffNjB988MFx0kknxezZszNzdO/evdrWWFM6duwY/fr1i969e8dRRx0VBxxwQN7nlZaWxpNPPhn33ntvzJw5s9xjW7ZsiYsuuiheffXVKl8sZuDAgZ+FQFFRUVx44YVx9dVXR7du3cqdJFhWVhZz5syJESNGZP7jz+Vycfnll8cbb7xRKyc71ieNGzeOE088MYqLi+Okk06Kww8/PHbbbbe8z3377bdjwoQJcc8992ReCXj55Zfjxz/+cdx222073Nd+++0Xc+fOLTc2bdq0+NWvflVu7Oyzz46f/vSnO5ynadOmX/ZtVViXLl0ya6qMu+66K/74xz9mxnfZZZcqz00tquVzFqhGq1evzjVr1ixzos+ECRN2uM2oUaMyz2/VqlVuw4YNlV5HbZ5A+MADD+T69++fmz17dqXWPnr06FzTpk0za7jlllt2ap7tt//81x577FGh349t27blhgwZkneOp556qlLfX1XUlxMIzznnnNwNN9yQW758+U7vv7S0NHfxxRdn9t+kSZPc+++/v1Nz5ftehg4dutNryuUqdwJhITz88MN5T0bu0aNH7pNPPqn2/VN9xEADNnLkyMxf2t133z33n//8Z4fbrF27Nte8efPMdqNHj670OmozBsrKyiq36M+ZPHlyZg1f/epXc1u3bq3wHDsKgRYtWuT+8Y9/VHieTZs25Tp16pSZZ+DAgZX51qok359rTX3tTAxU9RjYtm1brn///pk1jBgxYqfmqe8x8NJLL+VatGiR2W+nTp1yq1atqtZ9U/2cM9CA5buk8IUXXhjNmjXb4TatW7eOc889NzNeX29eVIiXzvv37x/nnXdeubFly5YV5L362267LY488sgKP79p06YxfPjwzPhf//rXKq+loarqMdCoUaO45557okWLFuXGx48fX6V565Nly5ZFcXFxbNy4sdx427ZtY9q0aW553gCIgQZq/vz58be//S0znu8kwe3luzzxX/7ylwp/JK8hyvd7UtX3X9u3bx+XX375Tm93/vnnZ24utWzZsrzXvqcw9t133+jdu3e5sXfffTeWL19eSyuqOevXr4++fftmzp3YddddY/LkydGpU6daWhmFJAYaqHw/yX96guCXOf3002P//fcvN5bL5er9xwyromvXrpmxF154oUpzDhkyJJo02flzeNu0aRMHHXRQZvztt9+u0nr4YtVxDNR127ZtiwsvvDAWLFiQeez++++PHj161MKqqA4+TdAAbdmyJcaNG5cZv+SSSyq0/acfPfzNb35Tbnz06NHx85//PPNTaQr23nvvzNiSJUuqNOfJJ59c6W2/9rWvxeLFi8uN5bsRTk075phj4p577inYfPnOwK8t1XEM1HVXX311PPnkk5nxESNG5H21jPpLDDRAU6dOzbxkvKOLCu3I0KFDMzGwbNmyeO655+KMM84oyDpry+LFi+Ppp5+O+fPnx4IFC2LFihWxbt26WL9+fWzevLnC85SWllZpHZ07d670tvk+1lgXYqB169bRrVu3gs23aNGigs31qW3btsWMGTPihRdeiPnz58cbb7wRpaWlnx0DX3QFyO1V9Rioy+6444649957M+MXXHBBnQk0CkcMNED5Thw8+eSTo2PHjhWe47DDDotjjz02c95BSUlJvYyBXC4XY8eOjZEjR8ZLL71UkDmr+h9BVU66ynfr202bNlVlOQ3eqlWr4uabb47x48fHRx99VJA5G2oMTJkyJa6//vrM+De/+c0YPXq0a1o0QGKggVm+fHnel/V25lWBTw0dOjQTA4888kiUlpZ+4VXa6pq33norhg0bVpALrnzehg0bqrT9ji54U1m57e4/wf+MHj06rrvuuli9enVB563qMVAXzZs3LwYNGpR5haRDhw7x2GOP5Q1R6r/03vxt4MaMGRPbtm0rN9a8efO44IILdnqugQMHZq4qtmnTprxXH6urXn/99TjllFMKHgLUH7fddlsMGzas4CEQ0fAC7IMPPoh+/fplIqd169bx+OOPxz777FNLK6O6eWWggcn3KYKuXbvGwoULKzVfly5d4sUXX8zs43vf+16l5qtJGzZsiLPOOmuHLwnvt99+ceKJJ0bnzp2jffv2sc8++0SzZs2iWbNmeS+tesIJJ1T3kimwKVOmxI9+9KO8jzVq1CiOOOKIOOGEE6Jjx47Rvn372H333T87BrY/UbYuncxYHf79739H375948MPPyw33rhx45g4cWIcfvjhtbQyaoIYaEDmzJkTb775ZmZ85syZBf2P7OWXX47XX389DjvssILNWR1uuummzE2AIv57u+Zf/OIX0bNnzwrPtXXr1gKujJqwadOmuPbaazPjjRs3juuuuy6uueaaHd6fIp+q3vmwLisrK4uBAwfGq6++mnnszjvvjD59+tT8oqhR3iZoQPKdONgQ9lUZW7dujfvuuy8zPnjw4Hj++ed3KgQiItasWVOglVFTpk2bFu+88065sUaNGsWUKVPi1ltv3akQiGjYx8APfvCDvLfn/v73vx9XXnllLayImiYGGoiNGzfGpEmTamx/48aNq9O3cZ01a1bmH+927drFfffdV+6OgBXl6n71z5QpUzJjl19+eZx99tmVmq+hHgMjR46Mu+66KzP+rW99K26//fZaWBG1QQw0EH/6059i/fr1Nba/jz/+OKZNm1Zj+9tZ+S7FfO6550bLli0rNd+8efOquiRqWL5joKIX3sqnIR4Df/7zn+Oaa67JjB911FExYcKESoUz9ZMYaCDynTjYp0+fyP33zpRV/urbt2+F9llX5Dtp8NBDD630fIW4KRE1q5DHwJYtWzIn0tZ38+fPj4suuijz6aP99tsvpk6dWulwpn4SAw3AkiVLYubMmZnxQYMGFWwfAwcOzIw98cQTBbt4S6HluxpfZf9x27BhQ0ycOLGqS6KGFfIYmDRpUo2+8lbdli9fHn379s18Ty1atIgpU6ZE+/bta2ll1BYx0ACUlJRkPu/cvHnz6N+/f8H2cc4552QukrN169YYO3ZswfZRSLvvvntmbPuPTFXUqFGjGuyV5hqyQh0D27Zta1DvnW/cuDGKi4szn7QpKiqKcePGxXHHHVdLK6M2iYF6rqysLMaMGZMZ79evX0Ff5tttt92iuLg4M15X3yrY/q6LEf99f3Rnvf3223HDDTcUYknUsEIdA7fcckuDOV+grKwsBg8eHK+88krmsV//+tcF/QGC+kUM1HPPPPNM3s/SF/Itgi+ac+HChXXyvdR8dwR86aWX4rHHHqvwHB988EEUFxc3yEvOpiDfMXDLLbfEunXrKjzHxIkT42c/+1khl1Wrhg8fHo8++mhm/Lvf/W4MHz685hdEnSEG6rl8P5nvsccecdZZZxV8X717944999yzQmuobV26dMn7vucll1wSTz/99Jdu/9xzz8VJJ5302V3znFVd/5x77rmZsXfffTf69u0bH3/88Rduu2nTpvjlL38ZgwYN+uyCU/X9GLj//vvjt7/9bWb81FNPLehtp6mfXIGwHluzZk3eyh8wYEDsuuuuBd/fLrvsEueff3787ne/Kzc+YcKEuOOOO+rUDUwaNWoUP/nJT+KKK64oN75+/fro06dP9O/fP4YMGRJdu3aNdu3axaZNm2LFihUxa9asmDRpUiYYRowYEf/3f/9Xk98CVXT66afHCSeckLkvxaxZs6Jz585xxRVXRN++feMb3/hG7LbbbrF69epYunRpPPHEEzFmzJhYunTpZ9s0a9Ysrr766sxtveuTfBcPatOmTVx//fV5P4a5sw4++ODYa6+9qjwPtUMM1GPjx4+PzZs3Z8ar4y2Cz8+9fQysXbs2Jk+eHIMHD662/VbGZZddFhMnTozp06eXG8/lcjF58uSYPHlyheY566yz4sYbbxQD9dC9994bJ554YuatnlWrVsVNN90UN91005fOUVRUFKNGjar3l6TOt/7S0tJKX4RpeyUlJTFs2LCCzEXN8zZBPZbv5fkDDjggevToUW37PPnkk/O+/F4X3ypo0qRJPPTQQ3HUUUdVeo5+/frFQw89FE2a6Ob66NOL51T2Vatddtklfv/738e3v/3tAq8M6hYxUE/Nnz8/7xnOF110UeZua4VUVFQUF198cWb8+eefj3fffbfa9ltZbdu2jTlz5sSll166U78vrVq1ittvvz0effTRaNGiRTWukOrWt2/fmDt3bnTu3Hmntjv66KNj9uzZcemll1bTyqDuKMo1tBtyJ2L27Nnx7LPPZsYHDx4cnTp1qtZ9L1myJO/1Bfr16xfHHntste67KhYtWhR33313PPPMM/HWW29lHm/ZsmV069YtiouLY8iQIZnPqd99992Zba666qpqWy+FVVZWFo888kiMHTs2Zs6cmffGQ+3bt49evXrFoEGD4swzz4yioqLPHlu0aFHm79yhhx4ap512WoX2/8wzz2RO4DvjjDPihz/8YSW+m533+e+lOniboH4TAyRp7dq18a9//StKS0ujadOmseeee+b9XDoNU1lZWXz00UexatWq2Lx5c7Rs2TL233//aNWqVW0vDWqFGACAxDlnAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHFiAAASJwYAIHH/D266hvLeTBBeAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["# @title Default title text\n","Ramadan_menu = {'roti': [\"flour\", \"water\", \"salt\", \"ghee\", \"desi ghee\"],\n","                'tarkari':['vegetable', 'chicken', 'oil', 'species',0]}\n","\n","import pandas as pd\n","df = pd.DataFrame(Ramadan_menu)"],"metadata":{"id":"YtQVlSKbUPBh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"BixgRne3VmwW","executionInfo":{"status":"ok","timestamp":1710243089989,"user_tz":-300,"elapsed":496,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"baca36fc-bedd-4784-a728-ff7058f9e024"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        roti    tarkari\n","0      flour  vegetable\n","1      water    chicken\n","2       salt        oil\n","3       ghee    species\n","4  desi ghee          0"],"text/html":["\n","  <div id=\"df-8a254652-ea20-45f5-ac58-8d322b01c2ab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>roti</th>\n","      <th>tarkari</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>flour</td>\n","      <td>vegetable</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>water</td>\n","      <td>chicken</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>salt</td>\n","      <td>oil</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ghee</td>\n","      <td>species</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>desi ghee</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a254652-ea20-45f5-ac58-8d322b01c2ab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a254652-ea20-45f5-ac58-8d322b01c2ab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a254652-ea20-45f5-ac58-8d322b01c2ab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4c4d455c-1977-488a-a4b0-f1339fc32e04\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c4d455c-1977-488a-a4b0-f1339fc32e04')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4c4d455c-1977-488a-a4b0-f1339fc32e04 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"roti\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"water\",\n          \"desi ghee\",\n          \"salt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tarkari\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"chicken\",\n          0,\n          \"oil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"-A-L-Dxebkq9","executionInfo":{"status":"ok","timestamp":1710243095340,"user_tz":-300,"elapsed":704,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"2a660297-0fe5-4fa7-b366-5ff902388abd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    roti    tarkari\n","0  flour  vegetable\n","1  water    chicken"],"text/html":["\n","  <div id=\"df-c0e36391-2a3c-40c1-84a9-830559f9527c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>roti</th>\n","      <th>tarkari</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>flour</td>\n","      <td>vegetable</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>water</td>\n","      <td>chicken</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0e36391-2a3c-40c1-84a9-830559f9527c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c0e36391-2a3c-40c1-84a9-830559f9527c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c0e36391-2a3c-40c1-84a9-830559f9527c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f02751d7-e390-4102-b8aa-9e4cd9ca79f8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f02751d7-e390-4102-b8aa-9e4cd9ca79f8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f02751d7-e390-4102-b8aa-9e4cd9ca79f8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"roti\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"water\",\n          \"desi ghee\",\n          \"salt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tarkari\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"chicken\",\n          0,\n          \"oil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"9-DZ6kuJbspd","executionInfo":{"status":"ok","timestamp":1710243171730,"user_tz":-300,"elapsed":522,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"bb77fc52-7a95-4598-f11d-b5b2a8fe22ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         roti    tarkari\n","count       5          5\n","unique      5          5\n","top     flour  vegetable\n","freq        1          1"],"text/html":["\n","  <div id=\"df-8b0cf6cd-f380-4111-9585-d0545b0c481c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>roti</th>\n","      <th>tarkari</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>flour</td>\n","      <td>vegetable</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b0cf6cd-f380-4111-9585-d0545b0c481c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8b0cf6cd-f380-4111-9585-d0545b0c481c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8b0cf6cd-f380-4111-9585-d0545b0c481c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-36304cb6-ba0b-49ef-9479-f31ac3e59dba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36304cb6-ba0b-49ef-9479-f31ac3e59dba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-36304cb6-ba0b-49ef-9479-f31ac3e59dba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"roti\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"5\",\n          \"flour\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tarkari\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"5\",\n          \"vegetable\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df[\"roti\"].nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VxVItmNqcGmy","executionInfo":{"status":"ok","timestamp":1710243248504,"user_tz":-300,"elapsed":500,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"5356270a-3be4-4067-f459-2e207533322b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["df.isna()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"mtTliJ34cRLp","executionInfo":{"status":"ok","timestamp":1710243293801,"user_tz":-300,"elapsed":518,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"6c4586ff-4320-4958-dcf7-9f9031a82046"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    roti  tarkari\n","0  False    False\n","1  False    False\n","2  False    False\n","3  False    False\n","4  False    False"],"text/html":["\n","  <div id=\"df-92567331-427f-4213-9841-d3265e09c856\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>roti</th>\n","      <th>tarkari</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92567331-427f-4213-9841-d3265e09c856')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-92567331-427f-4213-9841-d3265e09c856 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-92567331-427f-4213-9841-d3265e09c856');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d67ee29b-43d9-4f04-9805-ba0fc5051823\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d67ee29b-43d9-4f04-9805-ba0fc5051823')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d67ee29b-43d9-4f04-9805-ba0fc5051823 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"roti\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tarkari\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["Ramadan_menu_table.to_csv('Ramadan_menu.csv')"],"metadata":{"id":"kTwZCzEpZ4pr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Numpy Explaination**\n","\n","Explanation:\n","\n","NumPy is a powerful library for numerical computations in Python.\n","By importing NumPy as np, we can access its functionalities using the np prefix."],"metadata":{"id":"PyMl3RRzC_vL"}},{"cell_type":"markdown","source":["Explanation:\n","\n","We use the array() function from NumPy to create a 1-dimensional array.\n","The array is initialized with a list of numbers [1, 2, 3, 4, 5].\n","The arr_1d variable holds the created array"],"metadata":{"id":"570Q2ftVDMZE"}},{"cell_type":"code","source":["# Import NumPy library\n","import numpy as np\n","\n","# Create a 1D NumPy array\n","arr_1d = np.array([1, 2, 3, 4, 5])\n","type(arr_1d)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gWlpehxq-V-R","executionInfo":{"status":"ok","timestamp":1710243678936,"user_tz":-300,"elapsed":1387,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"02d34c36-177e-42c0-ea04-ecb06bdb4925"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["Explanation:\n","\n","Similarly, we use the array() function to create a 2-dimensional array (matrix).\n","The array is initialized with nested lists representing rows and columns.\n","The arr_2d variable holds the created 2D array."],"metadata":{"id":"RfcJI8U-MH4N"}},{"cell_type":"code","source":["[[\"mango\", \"grapes\"], [\"eggs\"]]"],"metadata":{"id":"6EUxOUqOeMCt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a 2D NumPy array\n","arr_2d = np.array([[1, 2, 2,3], [4,3, 5, 6], [\" Allah Hafiz\", 8,2, 9]])\n","arr_2d[2][0]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"ZCh_RvMv-WGz","executionInfo":{"status":"ok","timestamp":1710244243361,"user_tz":-300,"elapsed":397,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"08e1c561-4b8d-4a32-c9a4-1188026262a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["' Allah Hafiz'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["Explanation:\n","\n","The shape attribute of a NumPy array returns a tuple representing the dimensions of the array.\n","For the 2D array arr_2d, it returns (3, 3), indicating 3 rows and 3 columns."],"metadata":{"id":"HXV3cZKJMomA"}},{"cell_type":"code","source":["# Shape of the array\n","arr_2d.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CGrHucs_-WKB","executionInfo":{"status":"ok","timestamp":1710243972128,"user_tz":-300,"elapsed":544,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"1a5af8e0-1837-44f5-e6ad-3d7d0cabe485"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3, 4)"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["Explanation:\n","\n","We can access individual elements of a NumPy array using indexing.\n","For example, arr_2d[0, 0] accesses the element in the first row and first column.\n","Similarly, arr_2d[1, 1] accesses the element in the second row and second column.\n","arr_2d[2, 2] accesses the element in the third row and third column."],"metadata":{"id":"lSrxugM-DU4c"}},{"cell_type":"code","source":["months_seasons.(\"work\",\"acha \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"vfUQs5kJ0qa6","executionInfo":{"status":"error","timestamp":1710501677640,"user_tz":-300,"elapsed":652,"user":{"displayName":"Qazi Talha Ayub","userId":"16370502632380907159"}},"outputId":"f13350ed-7283-4ab0-f64d-37aa0512960d"},"execution_count":19,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"dictionary update sequence element #0 has length 1; 2 is required","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-af10a82bf1c3>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmonths_seasons\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"workac\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mValueError\u001b[0m: dictionary update sequence element #0 has length 1; 2 is required"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"54CNrTOA09At","executionInfo":{"status":"ok","timestamp":1710501428869,"user_tz":-300,"elapsed":419,"user":{"displayName":"Qazi Talha Ayub","userId":"16370502632380907159"}},"outputId":"f93beafd-f9c9-4238-fa50-3f3f4e9f46f1"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Season\n","Autumn    (September, October, November)\n","Spring               (March, April, May)\n","Summer              (June, July, August)\n","Winter     (January, February, December)\n","Name: Month, dtype: object\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Vv12EH551HmU"},"execution_count":null,"outputs":[]}]}