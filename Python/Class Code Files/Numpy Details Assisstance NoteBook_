{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1u_OXbvOGB5E8wRNJKmhIRfgvWPvKx8wo","timestamp":1710321001077}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Introduction to Numpy :\n","Numpy is a powerful library in Python used for numerical computing. It provides support for multidimensional arrays and various mathematical functions to operate on these arrays efficiently."],"metadata":{"id":"Ylxl6qepiha0"}},{"cell_type":"markdown","source":["To install Libraries use pip install \"library name..\"\n","\n","\n","https://pypi.org/project/pip/\n","\n"],"metadata":{"id":"PhKcwSGGMkl3"}},{"cell_type":"code","source":["# Importing numpy library\n","import numpy as np"],"metadata":{"id":"SliHZpCtigxj","executionInfo":{"status":"ok","timestamp":1710322678522,"user_tz":-300,"elapsed":14,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["##Creating Numpy Arrays:\n","\n","\n","1. From Python list:\n","\n","\n"],"metadata":{"id":"J_HXsyVKmuIf"}},{"cell_type":"code","source":["# Creating numpy array from Python list\n","arr_from_list = np.array([1, 2, 3, 4, 5])\n","print(\"arr_from_list\", arr_from_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ra2yibudigvq","executionInfo":{"status":"ok","timestamp":1710323346345,"user_tz":-300,"elapsed":967,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"cdef5d91-0749-4502-8e5c-e28ea931516c"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["arr_from_list [1 2 3 4 5]\n"]}]},{"cell_type":"markdown","source":["2. From built-in methods:\n","*italicised text*"],"metadata":{"id":"4wVWIJNOm91b"}},{"cell_type":"code","source":["# Creating numpy array using built-in methods\n","arr_zeros = np.zeros((3, 13))  # Create an array of zeros\n","arr_ones = np.ones((2, 2))    # Create an array of ones\n","arr_empty = np.empty((4, 2))  # Create an empty array\n","print(arr_zeros)\n","print(arr_ones)\n","print(arr_empty)"],"metadata":{"id":"Xw1dl_ifigtk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710323411147,"user_tz":-300,"elapsed":373,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"37e49880-2596-4ab5-adf2-e7286fe8076f"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n","[[1. 1.]\n"," [1. 1.]]\n","[[4.78308496e-310 0.00000000e+000]\n"," [0.00000000e+000 0.00000000e+000]\n"," [0.00000000e+000 0.00000000e+000]\n"," [0.00000000e+000 0.00000000e+000]]\n"]}]},{"cell_type":"markdown","source":["3. From random:\n","bold text"],"metadata":{"id":"kTzsPTaSnCUd"}},{"cell_type":"code","source":["# Creating numpy array with random values\n","arr_random = np.random.rand(3, 3)  # Create a 3x3 array with random values\n","print(arr_random)\n"],"metadata":{"id":"y1KqQl7goJG-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710326189680,"user_tz":-300,"elapsed":417,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"ea944ba3-60c8-4c11-aab3-06ce9a4d6ea4"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.65652899 0.35282121 0.37934817]\n"," [0.82125867 0.92700752 0.56996023]\n"," [0.66626216 0.6475012  0.86521269]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"vx55lVX1bHCl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Solution for the given range of random numbers generated by the numpy array."],"metadata":{"id":"WTWXtw-UYx8F"}},{"cell_type":"code","source":["from numpy import random\n","aarr = random.randint(5,15, size =(4 ,6))\n","print(aarr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AEBhaKP1Y2cQ","executionInfo":{"status":"ok","timestamp":1710326785134,"user_tz":-300,"elapsed":5098,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"0be04314-668b-442c-bfbf-f7774eee7fdb"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 9  9  9  7 14  6]\n"," [10 13  6  5 11 12]\n"," [13  7 10 14 13  5]\n"," [10  5  5  9 10 11]]\n"]}]},{"cell_type":"markdown","source":["##Array Attributes and Methods:\n","Numpy arrays have various attributes and methods:\n","\n","\n"],"metadata":{"id":"ZVd2p6vwnGaD"}},{"cell_type":"code","source":["# Creating a numpy array\n","arr = np.array([[112.2, 2.2, 3.5],\n"," [41.11, 5.212, 6.121],\n","  [1.11, 53.212, 26.121]])\n","print(\"array:\", arr)\n","\n","# Shape of the array\n","print(\"Shape of the array:\", arr.shape)\n","\n","# Data type of the array\n","print(\"Data type of the array:\", arr.dtype)\n","\n","# Maximum value in the array\n","print(\"Maximum value in the array:\", arr.max())\n","\n","# Minimum value in the array\n","print(\"Minimum value in the array:\", arr.min())\n","\n","# Index of maximum value in the array\n","print(\"Index of maximum value in the array:\", arr.argmax())\n","\n","# Index of minimum value in the array\n","print(\"Index of minimum value in the array:\", arr.argmin())\n","\n","# Number of dimensions in the array\n","print(\"Number of dimensions in the array:\", arr.ndim)\n"],"metadata":{"id":"cILD9IC4oNAn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710327212764,"user_tz":-300,"elapsed":1160,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"ee600924-5e2a-4569-c813-742df691d519"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["array: [[112.2     2.2     3.5  ]\n"," [ 41.11    5.212   6.121]\n"," [  1.11   53.212  26.121]]\n","Shape of the array: (3, 3)\n","Data type of the array: float64\n","Maximum value in the array: 112.2\n","Minimum value in the array: 1.11\n","Index of maximum value in the array: 0\n","Index of minimum value in the array: 6\n","Number of dimensions in the array: 2\n"]}]},{"cell_type":"markdown","source":["##Operations on Arrays:\n","\n","Various operations can be performed on numpy arrays:"],"metadata":{"id":"ZdJo7IXrnQaK"}},{"cell_type":"code","source":["# Copying an array\n","arr_copy = arr.copy()\n","print('arr_copy :: ', arr_copy)\n","# Appending an element to an array\n","arr_appended = np.append(arr, [7, 8, 9])\n","print('arr_appended : [7, 8, 9]:', arr_appended)\n","# Inserting an element at a specific position in an array\n","arr_inserted = np.insert(arr, 1, [10, 11, 12], axis=0)\n","print('arr_inserted : 1, [10, 11, 12] : ', arr_inserted)\n","# Sorting an array\n","arr_sorted = np.sort(arr)\n","print('arr_sorted :: ', arr_sorted)\n","# Removing/deleting elements from an array\n","arr_removed = np.delete(arr, 1, axis=1)\n","print('deleted:1: ', arr_removed)\n","# Combining/Concatenating arrays\n","arr_concatenated = np.concatenate((arr, arr_copy), axis=1)\n","print('arr_concatenated :arr + arr_copy : : ', arr_concatenated)\n","# Splitting an array\n","# arr_split = np.split(arr_concatenated, 2, axis=0)\n","# print('arr_split : by 2: ', arr_split)\n"],"metadata":{"id":"fbjg8wE1igko","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328887738,"user_tz":-300,"elapsed":469,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"63e60532-d8fd-4307-a740-b116c6c59c77"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["arr_copy ::  [[112.2     2.2     3.5  ]\n"," [ 41.11    5.212   6.121]\n"," [  1.11   53.212  26.121]]\n","arr_appended : [7, 8, 9]: [112.2     2.2     3.5    41.11    5.212   6.121   1.11   53.212  26.121\n","   7.      8.      9.   ]\n","arr_inserted : 1, [10, 11, 12] :  [[112.2     2.2     3.5  ]\n"," [ 10.     11.     12.   ]\n"," [ 41.11    5.212   6.121]\n"," [  1.11   53.212  26.121]]\n","arr_sorted ::  [[  2.2     3.5   112.2  ]\n"," [  5.212   6.121  41.11 ]\n"," [  1.11   26.121  53.212]]\n","deleted:1:  [[112.2     3.5  ]\n"," [ 41.11    6.121]\n"," [  1.11   26.121]]\n","arr_concatenated :arr + arr_copy : :  [[112.2     2.2     3.5   112.2     2.2     3.5  ]\n"," [ 41.11    5.212   6.121  41.11    5.212   6.121]\n"," [  1.11   53.212  26.121   1.11   53.212  26.121]]\n"]}]},{"cell_type":"markdown","source":["##Data Loading & Saving:\n","\n","Numpy provides functions to load and save data from/to files."],"metadata":{"id":"bCngqOsInVcn"}},{"cell_type":"code","source":["# Saving array to a file\n","np.save('my_array.npy', arr)\n","\n","# Loading array from a file\n","loaded_arr = np.load('my_array.npy')\n"],"metadata":{"id":"IGe7xwk9igiy","executionInfo":{"status":"ok","timestamp":1710327928941,"user_tz":-300,"elapsed":2793,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":["##NumPy Indexing and Selection:\n","\n","Indexing and selection of elements in a numpy array:"],"metadata":{"id":"HjYaLi9rnaEo"}},{"cell_type":"code","source":["# Indexing a 2D array\n","print(\"Element at index (1, 1):\", arr[1, 1])\n","\n","# Logical selection\n","print(\"Elements greater than 3:\", arr[arr > 23])\n"],"metadata":{"id":"j6xGQfOLiggm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328100367,"user_tz":-300,"elapsed":1027,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"d9d87c39-24de-4f65-e3bf-1e1a09ec0583"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Element at index (1, 1): 5.212\n","Elements greater than 3: [112.2    41.11   53.212  26.121]\n"]}]},{"cell_type":"markdown","source":["##Broadcasting:\n","\n","Broadcasting allows arithmetic operations on arrays of different shapes.\n","\n"],"metadata":{"id":"AolNPFy4ngeG"}},{"cell_type":"code","source":["# Broadcasting\n","arr_broadcasted = arr + 5\n","\n","print(arr_broadcasted)\n"],"metadata":{"id":"QhgM4C_Cigch","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328188202,"user_tz":-300,"elapsed":584,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"49753eee-5e90-4402-bcfd-7b108c79bba8"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[[117.2     7.2     8.5  ]\n"," [ 46.11   10.212  11.121]\n"," [  6.11   58.212  31.121]]\n"]}]},{"cell_type":"markdown","source":["##Type Casting:\n","\n","Casting data types of numpy arrays:"],"metadata":{"id":"d-3beEYBnmhR"}},{"cell_type":"code","source":["# Type casting\n","arr_float = arr.astype(int)\n","print(arr_float)"],"metadata":{"id":"OIsr6lN_igXw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328232145,"user_tz":-300,"elapsed":6,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"ce04b3fa-7d39-4d19-8eef-77661a0a10c7"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["[[112   2   3]\n"," [ 41   5   6]\n"," [  1  53  26]]\n"]}]},{"cell_type":"markdown","source":["##Arithmetic Operations:\n","\n","Various arithmetic operations on numpy arrays:"],"metadata":{"id":"LZV9LE8AnrPr"}},{"cell_type":"code","source":["# Add\n","arr_add = arr + arr_copy\n","print('arr_add :: ',arr_add)\n","# Subtract\n","arr_subtract = arr - arr_copy\n","print('arr_subtract :: ', arr_subtract)\n","# Multiply\n","arr_multiply = arr * arr_copy\n","print(\"arr_multiply :: \", arr_multiply)\n","# Divide\n","arr_divide = arr / arr_copy\n","print('arr_divide:: ', arr_divide)\n","# Exponentiation\n","arr_exponentiation = arr ** 2\n","print('arr_exponentiation :: ', arr_exponentiation)"],"metadata":{"id":"LJCB6kTmigRG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328331047,"user_tz":-300,"elapsed":6,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"9e3c4126-b673-4755-ee50-f53ae8428d7a"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["arr_add ::  [[224.4     4.4     7.   ]\n"," [ 82.22   10.424  12.242]\n"," [  2.22  106.424  52.242]]\n","arr_subtract ::  [[0. 0. 0.]\n"," [0. 0. 0.]\n"," [0. 0. 0.]]\n","arr_multiply ::  [[1.25888400e+04 4.84000000e+00 1.22500000e+01]\n"," [1.69003210e+03 2.71649440e+01 3.74666410e+01]\n"," [1.23210000e+00 2.83151694e+03 6.82306641e+02]]\n","arr_divide::  [[1. 1. 1.]\n"," [1. 1. 1.]\n"," [1. 1. 1.]]\n","arr_exponentiation ::  [[1.25888400e+04 4.84000000e+00 1.22500000e+01]\n"," [1.69003210e+03 2.71649440e+01 3.74666410e+01]\n"," [1.23210000e+00 2.83151694e+03 6.82306641e+02]]\n"]}]},{"cell_type":"markdown","source":["##Universal Array Functions:\n","\n","Numpy provides various universal array functions to perform element-wise operations:"],"metadata":{"id":"PUPiWCZ9nwEm"}},{"cell_type":"code","source":["# Square root\n","arr_sqrt = np.sqrt(arr)\n","print('arr_sqrt :: ', arr_sqrt)\n","\n","# Exponential\n","arr_exp = np.exp(arr)\n","print('arr_exp :: ', arr_exp)\n","\n","# Trigonometric functions\n","arr_sin = np.sin(arr)\n","print('arr_sin :: ', arr_sin)\n","\n","arr_cos = np.cos(arr)\n","print('arr_cos :: ',arr_cos)\n"],"metadata":{"id":"lpMdKvY3igN5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710328605054,"user_tz":-300,"elapsed":445,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}},"outputId":"6db6c9c4-5246-47f3-999e-6305d07280e6"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["arr_sqrt ::  [[10.59245014  1.4832397   1.87082869]\n"," [ 6.41170804  2.28298051  2.47406548]\n"," [ 1.05356538  7.29465558  5.11087077]]\n","arr_exp ::  [[5.34368525e+48 9.02501350e+00 3.31154520e+01]\n"," [7.14243260e+17 1.83460613e+02 4.55319787e+02]\n"," [3.03435839e+00 1.28729467e+23 2.20905313e+11]]\n","arr_sin ::  [[-0.78166787  0.8084964  -0.35078323]\n"," [-0.2660524  -0.87776898 -0.16147522]\n"," [ 0.89569869  0.19384022  0.83506932]]\n","arr_cos ::  [[ 0.62369491 -0.58850112 -0.93645669]\n"," [-0.96395857  0.47908414  0.98687677]\n"," [ 0.44466152 -0.98103311  0.55014474]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"a94g5kOKigLV","executionInfo":{"status":"ok","timestamp":1710322679986,"user_tz":-300,"elapsed":21,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nfkzG95_igIt","executionInfo":{"status":"ok","timestamp":1710322679986,"user_tz":-300,"elapsed":21,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","execution_count":12,"metadata":{"id":"GV7L9VCXiWeD","executionInfo":{"status":"ok","timestamp":1710322679987,"user_tz":-300,"elapsed":22,"user":{"displayName":"Qazi Danish Ayub","userId":"14177622881280380240"}}},"outputs":[],"source":[]}]}